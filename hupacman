#!/usr/bin/python

# TODO: proper testing
# TODO: doesnt handle multiple cache dirs properly


# imports

import os
import re
import sys
import subprocess

# consts

pacman_default_options = ["--color", "always"]


# TODO: these should be options
pacman_alternate_cache = '~/pacman-cache'



bold_start = '\033[1m'
bold_end = '\033[0m'


# just for lazy copy-poste
def create_command_line_(params, options):
  """ dummy """
  command_line = []
  return command_line



def create_command_line_download_system_upgrade(params, options):
  command_line = prepare_pacman_invocation(option = '-Syuw')
  return command_line + options


def create_command_line_cleanup_cache(params, options):
  if(len (params["nb_versions_to_keep"]) != 1):
    complain_about_more_than_one_package_and_exit()
  command_line = [ "paccache", "-r", "-k", params["nb_versions_to_keep"][0] ] + options
  return command_line
  
def create_command_line_find_installed_packages(params, options):
  command_line = prepare_pacman_invocation() + options + [ "-Qs" ] + params['package_regexp']
  return command_line
  
def create_command_line_install(params, options):
  command_line = prepare_pacman_invocation()
  command_line += options + [ '-S' ] + params['package_name']
  return command_line

def create_command_line_install_file(params, options):
  command_line = prepare_pacman_invocation()
  command_line += options + [ '-U' ] + params['file_path']
  return command_line
  
def create_command_line_list_cached_versions(params, options):
  package_res = [ package_name + '-[0-9]*' for package_name in params['package_name'] ]
  command_line = [ "find", get_cache_dir(), "-name", package_res [0] ]
  for package_re in package_res [ 1 : ] :
    command_line += [ "-or", "-name", package_re ]
  return command_line

def create_command_line_list_explicitely_installed_packages(params, options):
  return prepare_pacman_invocation(option = "-Qte") + options

def create_command_line_list_installed_package_versions(params, options):
  return prepare_pacman_invocation(option = "-Q") + options

def create_command_line_list_installed_packages (params, options):
  return prepare_pacman_invocation(option = "-Qq") + options
  
def create_command_line_list_outofdate_packages(params, options):
  return prepare_pacman_invocation(option = "-Qu") + options

def create_command_line_show_info(params, options):
  return prepare_pacman_invocation() + options + [ '-Qi' ] + params['package_name']

def create_command_line_show_installed_version(params, options):
  command_line = prepare_pacman_invocation() + options
  command_line.append('-Q')
  command_line += params['package_name']
  return command_line

def create_command_line_show_journal(params, options):
  return [ 'less', get_journal_path() ]

def create_command_line_show_journal_last_lines(params, options):
  if(len(params['nb_lines']) != 1):
    complain_about_more_than_one_package_and_exit()
  return [ 'tail', '-n', params['nb_lines'][0], get_journal_path() ]

def create_command_line_show_which_package_provides(params, options):
  command_line = prepare_pacman_invocation()
  command_line += options + [ '-Qo' ] + params['file_path']
  return command_line

def create_command_line_uninstall(params, options):
  command_line = prepare_pacman_invocation() + options + [ '-R' ] + params['package_name']
  return command_line

def create_command_line_uninstall_and_remove_conf(params, options):
  command_line = prepare_pacman_invocation() + options + [ '-R', '--nosave' ] + params['package_name']
  return command_line

def create_command_line_upgrade_system (params, options):
  return prepare_pacman_invocation(option = '-Syu') + options

def create_command_line_list_orphan_dependencies(params, options):
  return prepare_pacman_invocation(option = '-Qqtd') + options

def create_command_line_show_dependencies_tree(params, options):
  package_names = params['package_name']
  if(len(package_names) != 1):
    complain_about_more_than_one_package_and_exit()
  command_line = [ 'pactree' ] + options + [ package_names[0] ]
  return command_line

def create_command_line_show_dependencies(params, options):
  command_line = prepare_pacman_invocation()
  command_line += options + [ '-Qi' ] + params['package_name']
  return command_line

def create_command_line_show_what_depend_on(params, options):
  command_line = prepare_pacman_invocation()
  command_line += options + [ '-Qi' ] + params['package_name']
  return command_line

# below are to be improved

def create_command_line_downgrade(params, options):
  # TODO: for each package, list cached versions, get the one preceding the last (how?) then invoke pacman -U
  raise Exception ("Es wird später implementet")
  package_names = []
  command_line = prepare_pacman_invocation ()
  return command_line

def create_command_line_install_aur(params, options):
  # TODO:
  # download snashot, unzip, show files to user, makepkg -sri (that's too much)
  # nicht sicher ob ich  das machen werde / not shua ail du dhis
  raise Exception ("Entschuldigung, es geht nicht.")
  return command_line

def create_command_line_check_if_installed(params, options) :
  # TODO
  return prepare_pacman_invocation() + options + [ '-Q' ] + params['package_name']


def create_command_line_show_last_upgrade(params, options):
  # TODO: this is also complicated
  raise Exception('Später...')
  command_line = []
  return command_line

def create_command_line_show_previous_upgrade(params, options):
  if(len(params['upgrade_age_rank']) != 1):
    complain_about_more_than_one_package_and_exit()
  # TODO: this is also complicated
  raise Exception("Später...")
  command_line = []
  return command_line

# specific processes
def process_outputs(action, action_special_params, outputs):
  if(action == 'check-if-installed'):
    print(f'{ "installed" if(outputs.returncode == 0) else "not found" }')
  elif(action == 'show-dependencies'):
    output_text =  remove_formatting(outputs.stdout.decode())
    dependencies = ' '.join(re.search('Depends On +:(.*)', output_text).group(1).split())
    print(dependencies)
  elif(action == 'show-what-depends-on'):
    output_text = remove_formatting(outputs.stdout.decode())
    dependencies = ' '.join(re.search('Required By +:(.*)', output_text).group(1).split())
    print(dependencies)
  else:
    raise Exception(f'unknown action with special processing: {action}')



actions = {
  "check-if-installed" : [ "package_name", create_command_line_check_if_installed, True ],
  "cleanup-cache" : [ "nb_versions_to_keep", create_command_line_cleanup_cache, None ],
  "download-system-upgrade" : [ "", create_command_line_download_system_upgrade, None ],
  "downgrade" : [ "package_name", create_command_line_downgrade, None ],
  "find-installed-packages" : [ "package_regexp", create_command_line_find_installed_packages, None ],
  "install" : [ "package_name", create_command_line_install, None ],
  "install-aur" : [ "package_name", create_command_line_install_aur, None ],
  "install-file" : [ "file_path", create_command_line_install_file, None ],
  "list-cached-versions" : [ "package_name", create_command_line_list_cached_versions, None ],
  "list-explicitely-installed-packages" : [ "", create_command_line_list_explicitely_installed_packages, None ],
  "list-installed-packages" : [ "", create_command_line_list_installed_packages, None ],
  "list-installed-package-versions" : [ "", create_command_line_list_installed_package_versions, None ],
  "list-outofdate-packages" : [ "", create_command_line_list_outofdate_packages, None ],
  'list-orphan-dependencies' : [ '', create_command_line_list_orphan_dependencies, None ],
  "show-dependencies" : [ "package_name", create_command_line_show_dependencies, True ],
  "show-dependencies-tree" : [ "package_name", create_command_line_show_dependencies_tree, None ],
  "show-info" : [ "package_name", create_command_line_show_info, None ],
  "show-installed-version" : [ "package_name", create_command_line_show_installed_version, None ],
  "show-journal" : [ "", create_command_line_show_journal, None ],
  "show-journal-last-lines" : [ "nb_lines", create_command_line_show_journal_last_lines, None ],
  #"show-last-upgrade" : [ "", create_command_line_show_last_upgrade, None ],  # todo:
  #"show-previous-upgrade" : [ "upgrade_age_rank", create_command_line_show_previous_upgrade, None ], # todo:
  "show-what-depends-on" : [ "package_name", create_command_line_show_what_depend_on, True ],
  "show-which-package-provides" : [ "file_path", create_command_line_show_which_package_provides, None ],
  "uninstall" : [ "package_name", create_command_line_uninstall, None ],
  "uninstall-and-remove-conf" : [ "package_name", create_command_line_uninstall_and_remove_conf, None ],
  "upgrade-system" : [ "", create_command_line_upgrade_system, None ],
   # to be modified:
}


alternative_name_dict = {
  'aur' : 'install-aur',
  'aur-install' : 'install-aur',
  'cache' : 'cleanup-cache',
  'clear-cache' : 'cleanup-cache',
  'clean-up-cache' : 'cleanup-cache',
  'clean-cache' : 'cleanup-cache',
  'dependencies' : 'show-dependencies',
  'depends' : 'show-dependencies',
  'depends-on' : 'show-what-depends-on',
  'download-upgrade' : 'download-system-upgrade',
  'explicit' : 'list-explicitely-installed-packages',
  'find' : 'find-installed-packages',
  'full-remove' : 'uninstall-and-remove-conf',
  'full-uninstall' : 'uninstall-and-remove-conf',
  'list-explicit' : 'list-explicitely-installed-packages',
  'info' : 'show-info',
  'installed' : 'check-if-installed',
  'journal' : 'show-journal',
  'journal-tail' : 'show-journal-last-lines',
  'list-orphans' : 'list-orphan-dependencies',
  'log' : 'show-journal',
  'log-tail' : 'show-journal-last-lines',
  'orphans' : 'list-orphan-dependencies',
  'required-by' : 'show-what-depends-on',
  'remove' : 'uninstall',
  #'show-tail-of-log' : 'show-journal-last-lines',
  #'show-version' : 'show-installed-version',
  'tree' : 'show-dependencies-tree',
  'upgrade' : 'upgrade-system',
  'version' : 'show-installed-version',
}


action_options = { k : v[0] for k, v in actions.items() }
action_is_simple_invocation = { k : (v[2] is None) for k, v in actions.items() }

actions_alternative_names = {
   action : [ alt for alt in alternative_name_dict.keys() if alternative_name_dict[alt] == action ]
   for action in alternative_name_dict.values()
}

# funs

def remove_formatting(s):
  return s.replace(bold_start, '').replace(bold_end, '')

def get_cache_dir(index = 0):
  results = subprocess.run([ 'pacconf', 'CacheDir'], capture_output = True)
  cache_dirs = results.stdout.decode().strip().split('\n')
  return cache_dirs[index]

def get_journal_path(index = 0):
  results = subprocess.run([ 'pacconf', 'LogFile'], capture_output = True)
  log_files = results.stdout.decode().strip().split('\n')
  return log_files[index]

def prepare_env():
  env = os.environ.copy()
  env['LC_ALL'] = 'en_US'
  return env

def convert_alternative_name(action):
  translated = action
  try :
    translated = alternative_name_dict[action]
  except(KeyError) :
    pass
  return translated

def print_help_and_exit():
  print(f'{bold_start}Options: --help (-h){bold_end}')
  print(f'{bold_start}Actions:{bold_end}')
  for action, parameter_type in sorted(action_options.items()):
    help_text = f' {action} '
    if (parameter_type != ""):
      help_text += " " + parameter_type.upper()
    print(help_text)
  #help_text = "\n"
  print('')
  print(f'  {bold_start}Alternative action names:{bold_end}')
  for action in sorted(actions_alternative_names.keys()):
    help_text = f'     {action} : '
    for alt_name in sorted(actions_alternative_names[action]):
      is_single_word = '-' not in alt_name
      if(is_single_word):
        help_text += bold_start
      help_text += alt_name
      if(is_single_word):
        help_text += bold_end
      help_text += ', '
    print(help_text[:-2])
  print('\n')
  sys.exit(2)
  return


def complain_about_more_than_one_package_and_exit():
  print(':-( This action requires only one package.')
  sys.exit(2)


def is_option(arg):
  return (arg[0] == '-')

def OLD_is_valid_option_then_set_option(option):
  is_valid = True
  if ((option == "-h") or (option == "--help")):
    print_help_and_exit ()
  elif ((option == "-s") or (option == "--save-root-space")):
    do_use_alternative_cache = True
  elif (option == "--show-pacman-config"):
    do_show_pacman_config = True
  else:
    is_valid = False
  return is_valid

def check_if_valid_option(option):
  """ capture --help option, execute it and exit """
  """ TODO: Accept anything else as a valid option - DONT """
  if ((option == '-h') or (option == '--help')):
    print_help_and_exit()
  if(option in [ '--noconfirm' ]):
    return True
  return True # False

def set_option(option):
  return

def does_action_exist(action):
  return (action in action_options)

def does_action_require_parameter(action):
  return (action_options [action] != "")

def prepare_pacman_invocation(option = None):
  command_line_head = [ 'pacman' ] + pacman_default_options
  if (do_show_pacman_config):
    command_line_head.append('-v')
  if (do_use_alternate_cache):
    command_line_head += [ '--cachedir', pacman_alternate_cache ]
  if (option is not None) :
    command_line_head += [ option ]
  return command_line_head


def apply_action(action, parameter_list, extra_options):
  
  is_simple_invocation = action_is_simple_invocation[action]
  parameter_type = action_options[action]
  params = {}
  params[parameter_type] = parameter_list
  command_line = actions[action][1](params, extra_options)
  
  if(not is_simple_invocation):
    action_special_params = action_options[action][2]
    do_capture_outputs = True # action_special_params['do_capture_outputs']
  else:
    do_capture_outputs = False
  
  if(not do_capture_outputs):
    # keep the default env here
    subprocess.call(command_line)
    outputs = None
  else:
    env = prepare_env()
    outputs = subprocess.run(command_line, capture_output = True, env = env)
  
  if(is_simple_invocation):
    return
  
  process_outputs(action, action_special_params, outputs)




# main

# TODO:
# if(name == '__main__'): 

# default options
do_show_pacman_config = False
do_use_alternate_cache = False

argv_len = len(sys.argv)
if(argv_len == 1):
  print_help_and_exit()

arg_idx = 1
is_action_already_determined = False
action_parameter_list = []
extra_options = []

while(arg_idx < argv_len):
  
  arg = sys.argv[arg_idx]
  
  if(not is_action_already_determined):
    
    if(is_option(arg)):
      if(not check_if_valid_option(arg)):
        print(" Unknown option: ", arg)
        print_help_and_exit()
      
      extra_options.append(arg)
      
    else:
      
      action = convert_alternative_name(arg)
      
      
      if(not does_action_exist(action)):
        print (" Unknown action: " + action)
        print_help_and_exit ()
        
      if(does_action_require_parameter(action)):
        if(arg_idx == argv_len - 1):
          print(" Action requires parameters")
          print_help_and_exit()
      else:
        if(arg_idx < argv_len - 1):
          print(" Action does not require parameters")
          print_help_and_exit()
          
      is_action_already_determined = True
          
  else:
    action_parameter_list.append(arg)
    
  arg_idx += 1


# check parameter ?

apply_action(action, action_parameter_list, extra_options)
    

